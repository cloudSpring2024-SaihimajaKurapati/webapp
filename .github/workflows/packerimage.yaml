# name: Integration Tests and Artifact Build

# on:
#   push:
#     branches:
#       - main
# env:
#   PROJECT_ID: ${{ secrets.PROJECTID }}
#   GCP_SA_KEY: ${{ secrets.GCP_IAM_KEYS }}
#   GCP_REGION: 'us-east1'  
#   MIG_NAME: 'my-igm-new-cloud'  
#   SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
#   NETWORK: 'vpc-network' 
#   SUBNETWORK: 'webapp' 


# jobs:
#   build:
#     name: CI
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Use Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: "14"

#       - name: Install MySQL client
#         run: sudo apt-get install -y mysql-client

#       - name: Install MySQL server
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y mysql-server
#           sudo systemctl start mysql
#           sudo systemctl status mysql
#           sudo mysql --user=root --password=root -e "CREATE DATABASE IF NOT EXISTS health_check_db;"
#           sudo mysql --user=root --password=root -e "SHOW DATABASES;"
#           sudo mysql --user=root --password=root -e "USE health_check_db; CREATE TABLE IF NOT EXISTS Users (id CHAR(36) BINARY PRIMARY KEY, firstName VARCHAR(255) NOT NULL, lastName VARCHAR(255) NOT NULL, userName VARCHAR(255) NOT NULL UNIQUE, password VARCHAR(255) NOT NULL, createdAt DATETIME NOT NULL, updatedAt DATETIME NOT NULL);"

#       - name: Set up environment variables
#         run: |
#           echo "DB_DIALECT=mysql" >> $GITHUB_ENV
#           echo "DB_HOST=localhost" >> $GITHUB_ENV
#           echo "DB_USERNAME=root" >> $GITHUB_ENV
#           echo "DB_PASSWORD=root" >> $GITHUB_ENV
#           echo "DB_NAME=health_check_db" >> $GITHUB_ENV

#       - name: Install dependencies
#         run: npm install

#       - name: Run tests
#         run: npm test

#       - name: Build application artifact
#         run: zip -r application.zip ./*

#       - name: Upload artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: application
#           path: application.zip

#       - name: Upload script artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: scripts
#           path: |
#             /tmp/nodeinstall.sh
#             /tmp/userPerm.sh
#             /tmp/nodeapplication.sh
#             /tmp/opsAgentInstall.sh
#             /tmp/opsAgentConfig.sh
            
#       - name: Set up Google Cloud SDK
#         uses: google-github-actions/setup-gcloud@v0.2.0
#         with:
#           project_id: ${{secrets.PROJECTID}}
#           service_account_key: ${{secrets.GCP_IAM_KEYS}}
#           export_default_credentials: true

#       - name: Setup Packer
#         uses: hashicorp/setup-packer@main
#         id: setup
#         with:
#           version: latest

#       - name: Initialize Packer
#         run: packer init webapp-application.pkr.hcl

#       - name: Make scripts executable
#         run: |
#           chmod +x nodeinstall.sh
#           chmod +x userPerm.sh
#           chmod +x nodeapplication.sh
#           chmod +x opsAgentInstall.sh
#           chmod +x opsAgentConfig.sh
          
#       - name: Build Google Cloud image with Packer
#         run: packer build webapp-application.pkr.hcl

#         #  CD 
    
#       - name: Get the latest image name
#         id: get-latest-image
#         run: |
#           IMAGE_NAME=$(gcloud compute images list --filter="name:custom-image*" --format="get(name)" --sort-by="~creationTimestamp" --limit=1)
#           echo "Latest image name is $IMAGE_NAME"
#           echo "::set-output name=image_name::$IMAGE_NAME"

#       # Create a new instance template with the new image and startup script
#       - name: Create a new instance template with startup script
#         run: |
#           gcloud compute instance-templates create "${{ env.MIG_NAME }}-template-${{ steps.get-latest-image.outputs.image_name  }}" \
#             --machine-type=e2-medium \
#             --image="${{ steps.get-latest-image.outputs.image_name }}" \
#             --image-project=${{ env.PROJECT_ID }} \
#             --region=${{ env.GCP_REGION }} \
#             --network="projects/${{ env.PROJECT_ID }}/global/networks/${{ env.NETWORK }}" \
#             --subnet="projects/${{ env.PROJECT_ID }}/regions/${{ env.GCP_REGION }}/subnetworks/${{ env.SUBNETWORK }}" \
#             --metadata=DB_HOST="${{ secrets.DB_HOST }}",DB_NAME="${{ secrets.DB_NAME }}",DB_PASSWORD="${{ secrets.DB_PASSWORD }}",DB_USER="${{ secrets.DB_USER }}",PORT="${{ secrets.PORT }}" \
#             --service-account='${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}' \
#             --scopes='https://www.googleapis.com/auth/cloud-platform'


#       # Update managed instance group with the new template
#       - name: Update managed instance group
#         run: |
#           gcloud compute instance-groups managed set-instance-template ${{ env.MIG_NAME }} \
#             --template="${{ env.MIG_NAME }}-template-${{ steps.get-latest-image.outputs.image_name }}" \
#             --region=${{ env.GCP_REGION }}

#       # Start a basic rolling update
#       - name: Start a basic rolling update
#         run: |
#           gcloud compute instance-groups managed rolling-action start-update ${{ env.MIG_NAME }} \
#             --version template="${{ env.MIG_NAME }}-template-${{ steps.get-latest-image.outputs.image_name }}" \
#             --region=${{ env.GCP_REGION }} \
#             --max-surge=3 \
#             --max-unavailable=0

name: Integration Tests and Artifact Build

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.PROJECTID }}
  GCP_SA_KEY: ${{ secrets.GCP_IAM_KEYS }}
  GCP_REGION: 'us-east1'  
  MIG_NAME: 'my-igm-new-cloud'  
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
  NETWORK: 'vpc-network' 
  SUBNETWORK: 'webapp' 

jobs:
  build:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install MySQL client
        run: sudo apt-get install -y mysql-client

      - name: Install MySQL server
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql
          sudo systemctl status mysql
          sudo mysql --user=root --password=root -e "CREATE DATABASE IF NOT EXISTS health_check_db;"
          sudo mysql --user=root --password=root -e "SHOW DATABASES;"
          sudo mysql --user=root --password=root -e "USE health_check_db; CREATE TABLE IF NOT EXISTS Users (id CHAR(36) BINARY PRIMARY KEY, firstName VARCHAR(255) NOT NULL, lastName VARCHAR(255) NOT NULL, userName VARCHAR(255) NOT NULL UNIQUE, password VARCHAR(255) NOT NULL, createdAt DATETIME NOT NULL, updatedAt DATETIME NOT NULL);"

      - name: Set up environment variables
        run: |
          echo "DB_DIALECT=mysql" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_USERNAME=root" >> $GITHUB_ENV
          echo "DB_PASSWORD=root" >> $GITHUB_ENV
          echo "DB_NAME=health_check_db" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Build application artifact
        run: zip -r application.zip ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: application
          path: application.zip

      - name: Upload script artifacts
        uses: actions/upload-artifact@v2
        with:
          name: scripts
          path: |
            /tmp/nodeinstall.sh
            /tmp/userPerm.sh
            /tmp/nodeapplication.sh
            /tmp/opsAgentInstall.sh
            /tmp/opsAgentConfig.sh
            
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: latest

      - name: Initialize Packer
        run: packer init webapp-application.pkr.hcl

      - name: Make scripts executable
        run: |
          chmod +x nodeinstall.sh
          chmod +x userPerm.sh
          chmod +x nodeapplication.sh
          chmod +x opsAgentInstall.sh
          chmod +x opsAgentConfig.sh
          
      - name: Build Google Cloud image with Packer
        run: packer build webapp-application.pkr.hcl

        # CD 
    
      - name: Get the latest image name
        id: get-latest-image
        run: |
          IMAGE_NAME=$(gcloud compute images list --filter="name:custom-image*" --format="get(name)" --sort-by="~creationTimestamp" --limit=1)
          echo "Latest image name is $IMAGE_NAME"
          echo "::set-output name=image_name::$IMAGE_NAME"

     # Create a new instance template with the new image and startup script
      - name: Create a new instance template with startup script
        run: |
          gcloud compute instance-templates create "${{ env.MIG_NAME }}-template-${{ steps.get-latest-image.outputs.image_name }}" \
            --machine-type=e2-medium \
            --region="${{ env.GCP_REGION }}" \
            --network="projects/${{ env.PROJECT_ID }}/global/networks/${{ env.NETWORK }}" \
            --subnet="projects/${{ env.PROJECT_ID }}/regions/${{ env.GCP_REGION }}/subnetworks/${{ env.SUBNETWORK }}" \
            --metadata=startup-script="${{ secrets.GCP_STARTUP_SCRIPT }}" \
            --service-account="${{ env.SERVICE_ACCOUNT_EMAIL }}" \
            --scopes="https://www.googleapis.com/auth/cloud-platform" \
            --tags="webapp-lb-target,application-instance" \
            --create-disk="auto-delete=yes,boot=yes,device-name=persistent-disk-0,image=projects/${{ secrets.PROJECTID }}/global/images/${{ steps.get-latest-image.outputs.image_name }},kms-key=projects/${{ secrets.PROJECTID }}/locations/${{ env.GCP_REGION }}/keyRings/${{ secrets.GCP_KEY_RING }}/cryptoKeys/${{ secrets.GCP_VM_CRYPTO_KEY }},mode=rw,size=20,type=pd-balanced"


      # Update managed instance group with the new template
      - name: Update managed instance group
        run: |
          gcloud compute instance-groups managed set-instance-template ${{ env.MIG_NAME }} \
            --template="${{ env.MIG_NAME }}-template-${{ steps.get-latest-image.outputs.image_name }}" \
            --region=${{ env.GCP_REGION }}

      # Start a basic rolling update
      - name: Start a basic rolling update
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{ env.MIG_NAME }} \
            --version template="${{ env.MIG_NAME }}-template-${{ steps.get-latest-image.outputs.image_name }}" \
            --region=${{ env.GCP_REGION }} \
            --max-surge=3 \
            --max-unavailable=0 
